// <auto-generated />
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(CustomerContext))]
    [Migration("20180426200750_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationCore.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FullName");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("InstallDate");

                    b.Property<bool>("IsInService");

                    b.Property<bool>("IsMalfunctioning");

                    b.Property<string>("Name");

                    b.Property<DateTime>("OutOfServiceDate");

                    b.Property<DateTime>("RemovalDate");

                    b.Property<int>("RetailCustomerId");

                    b.Property<int>("SelectedEquipmentIssueId");

                    b.Property<int>("SerialNumber");

                    b.Property<DateTime>("ServiceRequestDate");

                    b.HasKey("Id");

                    b.HasIndex("RetailCustomerId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("ApplicationCore.Entities.EquipmentIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EquipmentId");

                    b.Property<bool>("IsSelected");

                    b.Property<int?>("RetailCustomerId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("RetailCustomerId");

                    b.ToTable("EquipmentIssues");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<string>("Name");

                    b.Property<int>("RetailPrice");

                    b.Property<int>("Unit");

                    b.Property<int>("WholesalePrice");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RetailCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("BusinessName");

                    b.Property<string>("City");

                    b.Property<string>("ContactName");

                    b.Property<string>("Country");

                    b.Property<int>("DriverId");

                    b.Property<string>("Email");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("SalesAgentId");

                    b.Property<int?>("WholesaleCustomerId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("SalesAgentId");

                    b.HasIndex("WholesaleCustomerId");

                    b.ToTable("RetailCustomers");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RetailOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("DriverId");

                    b.Property<int>("RetailCustomerId");

                    b.Property<int>("SalesAgentId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RetailCustomerId");

                    b.HasIndex("SalesAgentId");

                    b.ToTable("RetailOrders");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RetailOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProductId");

                    b.Property<int>("ProductQuantity");

                    b.Property<int>("ProductRetailPrice");

                    b.Property<int>("RetailOrderId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RetailOrderId");

                    b.ToTable("RetailOrderDetails");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SalesAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FullName");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("SalesAgents");
                });

            modelBuilder.Entity("ApplicationCore.Entities.WholesaleCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("BusinessName");

                    b.Property<string>("City");

                    b.Property<string>("ContactName");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("SalesAgentId");

                    b.HasKey("Id");

                    b.HasIndex("SalesAgentId");

                    b.ToTable("WholesaleCustomers");
                });

            modelBuilder.Entity("ApplicationCore.Entities.WholesaleOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("SalesAgentId");

                    b.Property<int?>("WholesaleCustomerId");

                    b.HasKey("Id");

                    b.HasIndex("SalesAgentId");

                    b.HasIndex("WholesaleCustomerId");

                    b.ToTable("WholesaleOrders");
                });

            modelBuilder.Entity("ApplicationCore.Entities.WholesaleOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProductId");

                    b.Property<int>("ProductQuantity");

                    b.Property<int>("ProductWholesalePrice");

                    b.Property<int>("WholesaleOrderId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WholesaleOrderId");

                    b.ToTable("WholesaleOrderDetails");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Equipment", b =>
                {
                    b.HasOne("ApplicationCore.Entities.RetailCustomer", "RetailCustomer")
                        .WithMany("Equipment")
                        .HasForeignKey("RetailCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationCore.Entities.EquipmentIssue", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Equipment", "Equipment")
                        .WithMany("EquipmentIssues")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.RetailCustomer")
                        .WithMany("EquipmentIssue")
                        .HasForeignKey("RetailCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Product", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationCore.Entities.RetailCustomer", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Driver", "Driver")
                        .WithMany("DriverRetailCustomers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.SalesAgent", "SalesAgent")
                        .WithMany("AgentRetailCustomers")
                        .HasForeignKey("SalesAgentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.WholesaleCustomer")
                        .WithMany("RetailCustomers")
                        .HasForeignKey("WholesaleCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationCore.Entities.RetailOrder", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Driver", "Driver")
                        .WithMany("DriverRetailOrders")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.RetailCustomer", "RetailCustomer")
                        .WithMany("MyRetailOrders")
                        .HasForeignKey("RetailCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.SalesAgent", "SalesAgent")
                        .WithMany("AgentRetailOrders")
                        .HasForeignKey("SalesAgentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationCore.Entities.RetailOrderDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.RetailOrder", "RetailOrder")
                        .WithMany("RetailOrderDetails")
                        .HasForeignKey("RetailOrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationCore.Entities.WholesaleCustomer", b =>
                {
                    b.HasOne("ApplicationCore.Entities.SalesAgent", "SalesAgent")
                        .WithMany("AgentWholesaleCustomers")
                        .HasForeignKey("SalesAgentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationCore.Entities.WholesaleOrder", b =>
                {
                    b.HasOne("ApplicationCore.Entities.SalesAgent", "SalesAgent")
                        .WithMany("AgentWholesaleOrders")
                        .HasForeignKey("SalesAgentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.WholesaleCustomer", "WholesaleCustomer")
                        .WithMany("MyWholesaleOrders")
                        .HasForeignKey("WholesaleCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationCore.Entities.WholesaleOrderDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.WholesaleOrder", "WholesaleOrder")
                        .WithMany("WholesaleOrderDetails")
                        .HasForeignKey("WholesaleOrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
